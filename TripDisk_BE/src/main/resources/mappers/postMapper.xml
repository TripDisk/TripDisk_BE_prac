<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tripdisk.mvc.model.dao.PostDao">

	<!-- 1. 게시글 전체 조회 + 검색 -->
	<select id="selectAll" resultMap="postImagefileJoinRows" parameterType="HashMap">
		SELECT
		p.post_id, p.schedule_id, p.place, p.date, p.title, p.content,
		p.created_at, p.updated_at, p.is_shared,
		f.file_id, f.file_name
		FROM
		post p
		<!-- 이미지파일 조인 -->
		LEFT JOIN
		imagefiles f ON p.post_id = f.post_id
		
		<!-- 검색 조건 -->
		<choose>
		<when test="key != null and word != null">
			WHERE ${condition.key} LIKE concat('%',#{condition.word},'%') AND user_id = #{userId}
		</when>
		<otherwise>
			WHERE user_id = #{userId}
		</otherwise>
		</choose>
		
		<!-- 정렬 조건 -->
		<if test="orderBy != null and orderByDir != null">
			ORDER BY ${condition.orderBy} ${condition.orderByDir}
		</if>;
	</select>
	
	<!-- 조인 결과를 최종적으로 Post 객체로 반환 -->
	<resultMap id="postImagefileJoinRows" type="Post">
		<id property="postId" column="post_id" />
		<result property="scheduleId" column="schedule_id" />
		<result property="place" column="place" />
		<result property="date" column="date" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="createdAt" column="created_at" />
		<result property="updatedAt" column="updated_at" />
		<result property="isShared" column="is_shared" />
		<collection property="imageFiles" ofType="ImageFile">
			<id property="fileId" column="file_id" />
			<result property="fileName" column="file_name" />
			<result property="postId" column="post_id" />
		</collection>
	</resultMap>
	<!-- post_id 열의 값(column)을 Post 객체의 postId필드(property)에 매핑 -->
	<!-- imageFiles라는 리스트 필드(property)에 ImageFile 객체(ofType)를 매핑, 
	file_id, file_name, postId을 이용해 ImageFile 객체 생성하고 imagefiles 리스트에 추가 -->
	
	<!-- http://localhost:8080/api-post/post?key=title&word=스위스&orderBy=date&orderByDir=asc  -->
	
	<!-- 2. 게시글 상세 조회 -->
	<select id="selectOne" resultType="Post" parameterType="int">
		SELECT *
		FROM post WHERE post_id = #{postId};
	</select>

	<!-- 3. 게시글 등록 -->
	<insert id="insertPost" parameterType="Post"
		keyProperty="postId" useGeneratedKeys="true">
		INSERT INTO post (user_id, schedule_id,
		place, date, title, content, is_shared)
		VALUES (#{userId}, #{scheduleId},
		#{place}, #{date}, #{title}, #{content}, #{isShared});
	</insert>
	<!-- 4. 게시글 수정 -->
	<update id="updatePost" parameterType="Post">
		UPDATE post
		SET schedule_id
		= #{scheduleId}, place = #{place}, date = #{date}, title = #{title},
		content = #{content}, is_shared = #{isShared}
		WHERE post_id =
		#{postId};
	</update>
	<!-- 5. 게시글 삭제 -->
	<delete id="deletePost" parameterType="int">
		DELETE FROM post
		WHERE
		post_id = #{postId};
	</delete>

	<!-- 6. 다중 이미지파일 업로드 -->

	<!-- files 테이블 전체 컬럼 -->
	<sql id="fileColumns">
		file_id
		, post_id
		, file_name
	</sql>

	<insert id="insertImageFile" parameterType="ImageFile">
		INSERT INTO imagefiles (
		<include refid="fileColumns" />
		)
		VALUES
		<foreach item="file" collection="imageFiles" separator=",">
			(
			#{file.fileId}
			, #{file.postId}
			, #{file.fileName}
			)
		</foreach>
	</insert>
	<!-- sql 태그는 재사용하기 위한 사용하는 태그 sql태그의 id와 inclue태그의 refid를 연결해서 재사용 가능 foreach를 
		통해 리스트로 전달된 데이터(collection="list")를 순회하고 항목들은 ","로 구분 collection="imageFiles"로 
		써도됨. -->


	<!-- 7. postId로 이미지 리스트 가져오기 -->
	<select id="selectImageFileByPostId" resultType="ImageFile"
		parameterType="int">
		SELECT *
		FROM imagefiles WHERE post_id = #{postId};
	</select>

	<!-- 8. 스케줄id로 게시글 조회 -->
	<select id="selectPostsByScheduleId" parameterType="int" resultType="Post">
		SELECT *
		FROM post WHERE schedule_id = #{scheduleId};
	</select>
</mapper>


