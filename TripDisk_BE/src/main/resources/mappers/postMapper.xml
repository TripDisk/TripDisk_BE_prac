<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tripdisk.mvc.model.dao.PostDao">

	<!-- 0. 사용자 무관 공유 게시글 조회 -->

	<select id="selectShared" resultMap="postImagefileJoinRows">
		SELECT
		p.post_id, p.user_id,
		p.schedule_id, p.place, p.date, p.title,
		p.content, p.created_at,
		p.updated_at, p.is_shared,


		f.file_id, f.file_name,


		(SELECT COUNT(*) FROM
		likes WHERE p.post_id = likes.post_id) AS likes_count,


		(SELECT COUNT(*)
		FROM likes WHERE likes.user_id = #{userId} AND
		p.post_id =
		likes.post_id) AS is_liked

		FROM post p
		LEFT JOIN imagefiles f ON
		p.post_id = f.post_id
		WHERE p.is_shared = 1;
	</select>

	<!-- 1. 사용자 전용 게시글 전체 조회 + 검색 -->
	<select id="selectAll" resultMap="postImagefileJoinRows"
		parameterType="HashMap">
		SELECT
		p.post_id,  p.user_id, p.schedule_id, p.place, p.date, p.title, p.content,
		p.created_at, p.updated_at, p.is_shared,
		f.file_id, f.file_name,
		<!-- 좋아요 수 계산 -->
		(SELECT COUNT(*) FROM likes WHERE p.post_id = likes.post_id) AS
		likes_count,
		<!-- 사용자가 좋아요를 눌렀는지 여부 계산 -->
		(SELECT COUNT(*) FROM likes WHERE likes.user_id = #{userId} AND
		p.post_id = likes.post_id) AS is_liked

		FROM
		post p
		<!-- 이미지파일 조인 -->
		LEFT JOIN
		imagefiles f ON p.post_id = f.post_id

		<!-- where절 : 조건이 없을 경우 WHERE 절을 자동으로 생략 -->
		<where>
			<if test="condition.key != null and condition.word != null">
				<!-- condition.key가 'all'인 경우, title, content, place에서 모두 검색 -->
				<if test="condition.key == 'all'">
					(title LIKE concat('%', #{condition.word}, '%')
					OR
					content LIKE concat('%', #{condition.word}, '%')
					OR place LIKE
					concat('%', #{condition.word}, '%'))
				</if>

				<!-- condition.key가 'all'이 아닌 경우, 해당 key에 대해 검색 -->
				<if test="condition.key != 'all'">
					${condition.key} LIKE concat('%', #{condition.word},
					'%')
				</if>

			</if>
			<if test="condition.key == null or condition.word == null">
				AND user_id = #{userId}
			</if>
		</where>

		<!-- 정렬 조건 -->
		<choose>
			<when test="orderBy != null">
				<if test="orderBy == 'date'">
					ORDER BY date ${orderByDir}
				</if>
				<if test="orderBy == 'title'">
					ORDER BY title ${orderByDir}
				</if>
				<if test="orderBy == 'content'">
					ORDER BY content ${orderByDir}
				</if>
			</when>
			<otherwise>
				ORDER BY date ASC
			</otherwise>
		</choose>
		;
	</select>

	<!-- 조인 결과를 최종적으로 Post 객체로 반환 -->
	<resultMap id="postImagefileJoinRows" type="Post">
		<id property="postId" column="post_id" />
		<result property="scheduleId" column="schedule_id" />
		<result property="userId" column="user_id" />
		<result property="place" column="place" />
		<result property="date" column="date" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="createdAt" column="created_at" />
		<result property="updatedAt" column="updated_at" />
		<result property="isShared" column="is_shared" />
		<result property="likesCount" column="likes_count" />
		<result property="isLiked" column="is_liked" />
		<collection property="imageFiles" ofType="ImageFile">
			<id property="fileId" column="file_id" />
			<result property="fileName" column="file_name" />
			<result property="postId" column="post_id" />
		</collection>
	</resultMap>
	<!-- post_id 열의 값(column)을 Post 객체의 postId필드(property)에 매핑 -->
	<!-- imageFiles라는 리스트 필드(property)에 ImageFile 객체(ofType)를 매핑, file_id, file_name, 
		postId을 이용해 ImageFile 객체 생성하고 imagefiles 리스트에 추가 -->

	<!-- http://localhost:8080/api-post/post?key=title&word=스위스&orderBy=date&orderByDir=asc -->

	<!-- 2. 게시글 상세 조회 (좋아요 포함) -->
	<select id="selectOne" resultMap="postImagefileJoinRows"
		>
		SELECT
		p.post_id, p.user_id, p.schedule_id, p.place, p.date, p.title,
		p.content, p.created_at, p.updated_at, p.is_shared,
		f.file_id, f.file_name,


		(SELECT COUNT(*) FROM likes WHERE p.post_id = likes.post_id) AS likes_count,

		(SELECT COUNT(*) FROM likes WHERE likes.user_id = #{userId} AND
		p.post_id = likes.post_id) AS is_liked

		FROM post p

		LEFT JOIN imagefiles f ON p.post_id = f.post_id
		WHERE p.post_id = #{postId};
	</select>


	<!-- 3. 게시글 등록 -->
	<insert id="insertPost" parameterType="Post"
		keyProperty="postId" useGeneratedKeys="true">
		INSERT INTO post (user_id,
		schedule_id,
		place, date, title, content, is_shared)
		VALUES (#{userId},
		#{scheduleId},
		#{place}, #{date}, #{title}, #{content}, #{isShared});
	</insert>
	<!-- 4. 게시글 수정 -->
	<update id="updatePost" parameterType="Post">
		UPDATE post
		SET schedule_id
		= #{scheduleId}, place = #{place}, date =
		#{date}, title = #{title},
		content = #{content},
		is_shared =
		<if test="isShared == true">
			1
		</if>
		<if test="isShared == false">
			0
		</if>
		WHERE post_id =
		#{postId};
	</update>
	<!-- 5. 게시글 삭제 -->
	<delete id="deletePost" parameterType="int">
		DELETE FROM post
		WHERE
		post_id = #{postId};
	</delete>

	<!-- 6. 다중 이미지파일 업로드 -->

	<!-- files 테이블 전체 컬럼 -->
	<sql id="fileColumns">
		file_id
		, post_id
		, file_name
	</sql>

	<insert id="insertImageFile" parameterType="ImageFile">
		INSERT INTO imagefiles (
		<include refid="fileColumns" />
		)
		VALUES
		<foreach item="file" collection="imageFiles" separator=",">
			(
			#{file.fileId}
			, #{file.postId}
			, #{file.fileName}
			)
		</foreach>
	</insert>
	<!-- sql 태그는 재사용하기 위한 사용하는 태그 sql태그의 id와 inclue태그의 refid를 연결해서 재사용 가능 foreach를 
		통해 리스트로 전달된 데이터(collection="list")를 순회하고 항목들은 ","로 구분 collection="imageFiles"로 
		써도됨. -->


	<!-- 7. postId로 이미지 리스트 가져오기 -->
	<select id="selectImageFileByPostId" resultType="ImageFile"
		parameterType="int">
		SELECT *
		FROM imagefiles WHERE post_id = #{postId};
	</select>

	<!-- 8. 스케줄id로 게시글 조회 + 좋아요 정보 -->
	<select id="selectPostsByScheduleId"
		resultMap="postImagefileJoinRows">
		SELECT
		p.post_id, p.schedule_id, p.place, p.date, p.title,
		p.content,
		p.created_at, p.updated_at, p.is_shared,


		(SELECT COUNT(*)
		FROM likes WHERE p.post_id = likes.post_id) AS likes_count,


		(SELECT
		COUNT(*) FROM likes WHERE likes.user_id = #{userId} AND
		p.post_id =
		likes.post_id) AS is_liked

		FROM post p
		WHERE p.schedule_id =
		#{scheduleId};

	</select>

	<!-- 9. 기존 이미지 삭제 -->
	<delete id="deleteImageFilesByPostId" parameterType="int">
		DELETE FROM
		imagefiles
		WHERE post_id = #{postId}
	</delete>

	<!-- 10. fileName으로 이미지 삭제 -->
	<delete id="deleteImageFileByFileName" parameterType="String">
		DELETE FROM
		imagefiles
		WHERE file_name = #{fileName}
	</delete>

	
</mapper>


